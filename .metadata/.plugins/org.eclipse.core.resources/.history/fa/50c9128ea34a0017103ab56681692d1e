package com.example.BasicProjectUsingVaadin;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;

import com.example.BasicProjectUsingVaadin.impl.MasterServiceImpl;
import com.example.BasicProjectUsingVaadin.impl.SpringDataServiceImpl;
import com.example.BasicProjectUsingVaadin.model.CountryEntity;
import com.example.BasicProjectUsingVaadin.model.ItemSizeEntity;
import com.vaadin.data.provider.DataProvider;
import com.vaadin.data.provider.ListDataProvider;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.VaadinSession;
import com.vaadin.spring.annotation.SpringView;
import com.vaadin.ui.Grid;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SpringView(name=StyleView.NAME)
public class StyleView extends VerticalLayout implements View
{

	private static final long serialVersionUID = 1L;
	public static final String NAME = "Style";
	//public static String Name="Style";
	private Label label;
	
	@Autowired
//	@Qualifier("serviceImpl")
	private MasterServiceImpl masterServiceImpl;
	
	@Autowired
//	@Qualifier("serviceImpl")
	private SpringDataServiceImpl serviceImpl;
	
	
	@PostConstruct
	public void init()
	{
	
		
		TextField filter=new TextField();
		
		Iterable<ItemSizeEntity>people = serviceImpl.findAllItemSize();
		
		/*List<CountryEntity> list=new ArrayList<CountryEntity>();
		CountryEntity country=masterServiceImpl.findCountryById((Integer) VaadinSession.getCurrent().getAttribute("countryId"));
		list.add(country);
		*/
		
		
		label = new Label((String) VaadinSession.getCurrent().getAttribute("countryId"));
		
		Grid<ItemSizeEntity> grid=new Grid<ItemSizeEntity>(ItemSizeEntity.class);
		grid.setSizeFull();
	/*	
		Grid<CountryEntity> grid=new Grid<CountryEntity>(CountryEntity.class);
		grid.setSizeFull();*/
		//grid.setColumns("id","desc");

        ListDataProvider<ItemSizeEntity> dataProvider = DataProvider.ofCollection((Collection<ItemSizeEntity>) people);
        grid.setDataProvider(dataProvider);
		
	/*	 ListDataProvider<CountryEntity> dataProvider = DataProvider.ofCollection((Collection<CountryEntity>) list);
	        grid.setDataProvider(dataProvider);*/
        
        filter.addValueChangeListener(event -> {
            dataProvider.setFilter(ItemSizeEntity::getQuantity, quantity -> {
                if (quantity == null) {
                    return false;
                }
               //String companyLower = quantity.toLowerCase(Locale.ENGLISH);
                String a =quantity.toString();
                String filterLower = event.getValue();
                return  a.equals(filterLower);//a.contains(filterLower);
            });
        });
        
		addComponents(label,filter,grid);
	}
	
	
	@Override
	public void enter(ViewChangeEvent event) {
		
	}
	
}


